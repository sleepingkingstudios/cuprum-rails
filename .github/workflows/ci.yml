# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will download a prebuilt Ruby version, install dependencies and run tests with Rake
# For more information see: https://github.com/marketplace/actions/setup-ruby-jruby-and-truffleruby

name: Ruby

on:
  - push
  - pull_request

jobs:
  rspec:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        gemfile: ['rails_8_0']
        ruby-version: ['3.2', '3.3', '3.4']
        include:
          - gemfile: 'rails_7_0'
            ruby-version: '3.1'
          - gemfile: 'rails_7_1'
            ruby-version: '3.2'
          - gemfile: 'rails_7_2'
            ruby-version: '3.3'

    # Sets up the build environment.
    env:
      BUNDLE_GEMFILE: "${{ github.workspace }}/gemfiles/${{ matrix.gemfile }}.gemfile"
      DATABASE_HOST:     localhost
      DATABASE_PORT:     5432
      DATABASE_USERNAME: postgres
      DATABASE_PASSWORD: postgres_password

    services:
      # Initialize a PostgreSQL service on postgres:5432.
      postgres:
        image: postgres:latest
        env:
          POSTGRES_PASSWORD: postgres_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    # Downloads a copy of the code in your repository before running CI tests
    - uses: actions/checkout@v4

    # Sets up the Ruby environment and runs `bundle install'.
    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ matrix.ruby-version }}
        bundler-cache: true # runs 'bundle install' and caches installed gems automatically

    # Smoke check to ensure database connection is established.
    - name: Query database
      run: psql "postgresql://postgres:postgres_password@localhost:5432/postgres" -c 'SELECT 1;'

    # Create the test database and set the schema.
    - name: Set up Database
      run: bundle exec rails db:create db:schema:load db:test:prepare

    # Set up local configuration files.
    - name: Set up RSpec configuration
      run: cp .rspec.example .rspec

    # Run the entire RSpec suite.
    - name: Run test suite
      run: bundle exec thor ci:rspec

  rspec_each:
    runs-on: ubuntu-latest

    # Sets up the build environment.
    env:
      DATABASE_HOST:     localhost
      DATABASE_PORT:     5432
      DATABASE_USERNAME: postgres
      DATABASE_PASSWORD: postgres_password

    services:
      # Initialize a PostgreSQL service on postgres:5432.
      postgres:
        image: postgres:latest
        env:
          POSTGRES_PASSWORD: postgres_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    # Downloads a copy of the code in your repository before running CI tests
    - uses: actions/checkout@v4

    # Sets up the Ruby environment and runs `bundle install'.
    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: 3.4
        bundler-cache: true # runs 'bundle install' and caches installed gems automatically
        cache-version: 1

    # Smoke check to ensure database connection is established.
    - name: Query database
      run: psql "postgresql://postgres:postgres_password@localhost:5432/postgres" -c 'SELECT 1;'

    # Create the test database and set the schema.
    - name: Set up Database
      run: bundle exec rails db:create db:schema:load db:test:prepare

    # Set up local configuration files.
    - name: Set up RSpec configuration
      run: cp .rspec.example .rspec

    # Run the individual RSpec tests.
    - name: Run each test
      run: bundle exec thor ci:rspec_each

  rubocop:
    runs-on: ubuntu-latest

    steps:
    # Downloads a copy of the code in your repository before running CI tests
    - uses: actions/checkout@v4

    # Sets up the Ruby environment and runs `bundle install'.
    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: 3.4
        bundler-cache: true # runs 'bundle install' and caches installed gems automatically
        cache-version: 1

    # Set up local configuration files.
    - name: Set up RuboCop configuration
      run: cp .rubocop.example .rubocop

    # Run the RuboCop linter tool.
    - name: Lint Ruby
      run: bundle exec rubocop
